{"version":3,"sources":["Form.js","MoviePoster.js","MovieDetails.js","Movies.js","App.js","serviceWorker.js","index.js"],"names":["Form","handleChange","event","setState","yearChoice","target","value","handleSortChoice","console","log","sortChoice","state","className","action","htmlFor","type","name","id","onChange","this","onClick","props","handleClick","Component","Posters","getPosters","movie","posterPath","poster_path","currentMovie","src","alt","title","Details","runtime","releaseDate","averageVote","axios","get","movieId","params","api_key","then","result","data","release_date","vote_average","Movies","movies","map","key","App","buttonTriggered","preventDefault","method","url","dataResponse","sort_by","primary_release_year","results","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ddad465.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Form extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      yearChoice: \"\",\n      sortChoice: 'popularity.desc',\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      yearChoice: event.target.value,\n    });\n  };\n\n  handleSortChoice = (event) => {\n    console.log(event.target.value);\n    this.setState({\n      sortChoice: event.target.value,\n    })\n  }\n  render() {\n    return (\n      <div className=\"form\">\n        <form action=\"\">\n          <fieldset>\n            <label htmlFor=\"yearChoice\">\n              Choose your year!\n            </label>\n            <input\n              type=\"number\"\n              name=\"yearChoice\"\n              id=\"yearChoice\"\n              onChange={this.handleChange}\n              value={this.state.yearChoice}\n            />\n          </fieldset>\n          <fieldset>\n            <label htmlFor=\"searchField\">Sort your stuff!</label>\n            <select name=\"searchField\" id=\"searchField\"\n              value={this.state.sortChoice} onChange={(event) => {\n                this.handleSortChoice(event)}}>\n              <option value=\"popularity.desc\">Popularity</option>\n              <option value='primary_release_date.desc'>Release Date</option>\n              <option value=\"vote_count.desc\">Amount of Votes</option>\n              <option value=\"revenue.desc\">Revenue</option>\n            </select>\n          </fieldset>\n          <button\n            type=\"submit\"\n            onClick={ (event) => {\n              this.props.handleClick(event, this.state.yearChoice, this.state.sortChoice);\n            }}\n            >Lets see our options!</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\n\n// movie images/overview text rendering.\n\nclass Posters extends Component {\n  \n\n  getPosters = (movie) => {\n    const posterPath = movie.poster_path;\n    const posterImage = `https://image.tmdb.org/t/p/w300${posterPath}`;\n    return posterImage;\n  };\n  \n  render() {\n    const movie = this.props.currentMovie;\n\n    return (\n      <div\n        className=\"imageContainer\"\n      >\n        <img src={this.getPosters(movie)} alt={`${movie.title} poster`} />\n      </div>\n    );\n  }\n}\n\nexport default Posters;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nclass Details extends Component {\n  constructor() {\n    super();\n    this.state = {\n      runtime: '',\n      releaseDate: '',\n      averageVote: '',\n      title: '',\n    }\n  }\n  \n  // making another API call in order to get the movie details for the specific movie, more info returned this way \n  componentDidMount() {\n    axios.get(`https://api.themoviedb.org/3/movie/${this.props.movieId}`, {\n      params: {\n        api_key: \"beabdb43f08aa5d9b3b495150f0ba136\",\n      },\n    })\n    .then((result) => {\n      console.log(result.data);\n      this.setState({\n        releaseDate: result.data.release_date,\n        runtime: result.data.runtime,\n        averageVote: result.data.vote_average,\n        title: result.data.title,\n      })\n  \n    })\n  }\n  \n  render() {\n    return(\n      <div className=\"movieDetails\">\n        <h3>{this.state.title}</h3>\n        <p>Released On: {this.state.releaseDate}</p>\n        <p>Runtime: {this.state.runtime} minutes</p>\n        <p>Average Vote: {this.state.averageVote}</p>\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React, { Component } from \"react\";\nimport Posters from \"./MoviePoster\";\nimport Details from \"./MovieDetails\"\n\nclass Movies extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentMovie: [],\n    };\n  }\n  \n  render() {\n    const movies = this.props.movies;\n\n    return (\n      <div className=\"movies\">\n        <h2>Your Movie Choices Are....</h2>\n        {/* Mapping through the movies array to get the id's, then passing that as a prop to the moviedetails class */}\n        {movies.map((movie) => {\n          return (\n            <div key={movie.id}>\n              <h2 className=\"nowPlayingSign\">Now Playing...</h2>\n              {/* <h3>{movie.title}</h3> */}\n              <Posters currentMovie={movie} /> \n              <Details movieId={movie.id} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Form from './Form.js'\nimport Movies from './Movies.js'\n\nclass App extends Component{\n\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      buttonTriggered: false,\n    }\n  }\n\n  handleClick = (event, yearChoice, sortChoice) => {\n    this.setState({\n      buttonTriggered: true,\n    })\n\n    event.preventDefault();\n    // initial axios call \n    axios({\n      method: \"GET\",\n      url: \"https://api.themoviedb.org/3/discover/movie?vote_count.gte=1000\",\n      dataResponse: \"json\",\n      params: {\n        api_key: \"beabdb43f08aa5d9b3b495150f0ba136\",\n        sort_by: sortChoice,\n        primary_release_year: yearChoice,\n      },\n    }).then((result) => {\n      const movies = result.data.results;\n      this.setState({\n        movies,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <h1>Wanna go to the movies with me?</h1>\n        <Form handleClick={this.handleClick} />\n        {this.state.buttonTriggered ? (\n          <Movies movies={this.state.movies} getPosters={this.getPosters} />\n        ) : null}\n        <footer>\n          <p>\n            Created at <a href=\"https://junocollege.com/\">Juno College</a> by\n            <a href=\"https://www.paigelongname.com/\"> Paige Freeman-Cyopeck</a> , powered by the MovieDB API\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}